openapi: 3.0.0
servers:
  - url: 'http://localhost:9090'
info:
  description: aggiungere
  version: 1.0.0
  title: Swagger partyh-finder-users
tags:
  - name: Users
    description: Operations about users
  - name: Chat
    description: Operations about Chat
  - name: Missive
    description: Operations about Missive
paths:
  /users:
    get:
      tags:
        - Users
      summary: Find all users
      description: 'return a page of users'
      operationId: findAllUsers
      parameters:
        - name: pageSize
          in: query
          description: 'Limit number element for one page '
          schema:
            type: integer
            format: int32
        - name: numberOfPage
          in: query
          description: 'Number of page '
          schema:
            type: integer
            format: int32
        - name: descending
          in: query
          description: 'Descending or Ascending order '
          schema:
            type: boolean
        - name: sortBy
          in: query
          description: 'Sort list by value, accepted values are: createdAt,updatedAt,firstName,lastName,username,status'
          schema:
            type: string
        - name: userName
          in: query
          description: 'Filter list by userName '
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPageDTO'
    post:
      tags:
        - Users
      summary: 'add an user on db,  Id must be null, first name, last name, gender(must be a valid gender 0 male, 1 female, 2 other), email(must me a valid email), username, address,and phone number are required. Chats and matched user will be set to null.'
      description: 'add an user on db,  Id must be null, first name, last name, gender(must be a valid gender 0 male, 1 female, 2 other), email(must me a valid email), username, address,and phone number are required. Chats and matched user will be set to null.'
      operationId: addUser
      requestBody:
        description: User object that needs to be added to the database,
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
        '404':
          description: Not Found exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorDTO'
    put:
      tags:
        - Users
      summary: 'update an user on db, unchangeable values are email, password and phone number, will be set by the previous value, but firstname, last name, username address and gender can be updated, and cannot be null'
      description: 'update an user on db, unchangeable values are email, password and phone number, will be set by the previous value, but firstname, last name, username address and gender can be updated, and cannot be null'
      operationId: updateUser
      requestBody:
        description: User object that needs to be updated to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
  /user/{id}:
    delete:
      tags:
        - Users
      summary: delete a user
      description: 'delete a user by id'
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          description: 'id of the user to delete '
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: user deleted
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
    get:
      tags:
        - Users
      summary: delete a user
      description: 'delete a user by id'
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          description: 'id of the user to get '
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
  /chat:
    get:
      tags:
        - Chat
      summary: Find all Chats
      description: 'return a page of Chat'
      operationId: findAllChat
      parameters:
        - name: pageSize
          in: query
          description: 'Limit number element for one page '
          schema:
            type: integer
            format: int32
        - name: numberOfPage
          in: query
          description: 'Number of page '
          schema:
            type: integer
            format: int32
        - name: descending
          in: query
          description: 'List order natural or reverse '
          schema:
            type: boolean
        - name: sortBy
          in: query
          description: 'Sort list by value '
          schema:
            type: string
        - name : name
          in: query
          description: 'name of the chat to search '
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatPageDTO'
    post:
      tags:
        - Chat
      summary: Add a new Chat
      description: 'add an Chat on db'
      operationId: addChat
      requestBody:
        description: Chat object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatDTO'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatDTO'
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
    put:
      tags:
        - Chat
      summary: update an Chat
      description: 'update an Chat on db'
      operationId: updateChat
      requestBody:
        description: Chat object that needs to be updated to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatDTO'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatDTO'
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
  /chat/{id}:
    delete:
      tags:
        - Chat
      summary: delete a Chat
      description: 'delete a Chat by id'
      operationId: deleteChat
      parameters:
        - name: id
          in: path
          required: true
          description: 'id of the Chat to delete '
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Chat deleted
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
    get:
      tags:
        - Chat
      summary: get an Chat
      description: 'get a Chat by id'
      operationId: getChat
      parameters:
        - name: id
          in: path
          required: true
          description: 'id of the Chat to get '
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatDTO'
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
  /missive:
    get:
      tags:
        - Missive
      summary: Find all Missive
      description: 'return a page of Missive'
      operationId: findAllMissive
      parameters:
        - name: pageSize
          in: query
          description: 'Limit number element for one page '
          schema:
            type: integer
            format: int32
        - name: numberOfPage
          in: query
          description: 'Number of page '
          schema:
            type: integer
            format: int32
        - name: descending
          in: query
          description: 'List order natural or reverse '
          schema:
            type: boolean
        - name: sortBy
          in: query
          description: 'Sort list by value '
          schema:
            type: string
        - name: senderId
          in: query
          description: 'Filter by senderId '
          schema:
            type: integer
            format: int64
        - name: receiverId
          in: query
          description: 'Filter by receiverId '
          schema:
            type: integer
            format: int64
        - name : text
          in: query
          description: 'Filter by text '
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissivePageDTO'
    post:
      tags:
        - Missive
      summary: Add a new Missive
      description: 'add an Missive on db'
      operationId: addMissive
      requestBody:
        description: Missive object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MissiveDTO'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissiveDTO'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundErrorDTO'
    put:
      tags:
        - Missive
      summary: update an Missive
      description: 'update an Missive on db'
      operationId: updateMissive
      requestBody:
        description: Missive object that needs to be updated to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MissiveDTO'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissiveDTO'
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
  /missive/{id}:
    delete:
      tags:
        - Missive
      summary: delete a Missive
      description: 'delete a Missive by id'
      operationId: deleteMissive
      parameters:
        - name: id
          in: path
          required: true
          description: 'id of the Missive to delete '
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Missive deleted
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
    get:
      tags:
        - Missive
      summary: get an Missive
      description: 'get a Missive by id'
      operationId: getMissive
      parameters:
        - name: id
          in: path
          required: true
          description: 'id of the Missive to get '
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissiveDTO'
        '400':
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorDTO'
components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'id univoco per l utente'
        username:
          type: string
          description: 'username dell utente'
        email:
          type: string
          description: 'indirizzo email dell utente'
        password:
          type: string
          description: 'password dell utente (potrebbe essere memorizzata come hash)'
        firstName:
          type: string
          description: 'nome dell utente'
        lastName:
          type: string
          description: 'cognome dell utente'
        dateOfBirth:
          type: string
          format: date
          description: 'data di nascita dell utente'
        gender:
          type: integer
          format: int32
          description: 'genere dell utente (1 = maschio, 2 = femmina, 3 = none of your business))'
        phoneNumber:
          type: string
          description: 'numero di telefono dell utente'
        address:
          type: string
          description: 'indirizzo dell utente'
          #createdAt:
            #type: string
            #format: date-time
            #description: 'data di creazione dell utente'
          #updatedAt:
            #type: string
            #format: date-time
            #description: 'data di ultima modifica dell utente'
          #status:
            #type: string
            #description: 'indicatore se l account dell utente è attivo o disattivato'
        matchedUsers:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'
        chats:
          type: array
          items:
            $ref: '#/components/schemas/ChatDTO'

    UserPageDTO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'
        totalItems:
          type: integer
          format: int64
          description: 'Numero totale degli elementi'
        itemsPerPage:
          type: integer
          description: 'Numero di elementi nella pagina corrente'
        totalPages:
          type: integer
          description: 'Numero totale di pagine'
        currentPage:
          type: integer
          description: 'Pagina corrente'

    ChatDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'id univoco per la chat'
        name:
          type: string
          description: 'nome della chat'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'
        createdAt:
          type: string
          format: date-time
          description: 'data di creazione della chat'
        updatedAt:
          type: string
          format: date-time
          description: 'data di ultima modifica della chat'
        missives:
          type: array
          items:
            $ref: '#/components/schemas/MissiveDTO'

    ChatPageDTO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ChatDTO'
        totalItems:
          type: integer
          format: int64
          description: 'Numero totale degli elementi'
        itemsPerPage:
          type: integer
          description: 'Numero di elementi nella pagina corrente'
        totalPages:
          type: integer
          description: 'Numero totale di pagine'
        currentPage:
          type: integer
          description: 'Pagina corrente'

    MissiveDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'id univoco per il messaggio'
        sender:
          $ref: '#/components/schemas/UserDTO'
        chat:
          $ref: '#/components/schemas/ChatDTO'
        text:
          type: string
          description: 'testo del messaggio'
        createdAt:
          type: string
          format: date-time
          description: 'data di creazione del messaggio'
        updatedAt:
          type: string
          format: date-time
          description: 'data di ultima modifica del messaggio'
        sentAt:
          type: string
          format: date-time
          description: 'data di invio del messaggio'
        readAt:
          type: string
          format: date-time
          description: 'data di lettura del messaggio'
        deletedAt:
          type: string
          format: date-time
          description: 'data di cancellazione del messaggio'
        read:
          type: boolean
          description: 'indicatore se il messaggio è stato letto o meno'

    MissivePageDTO:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MissiveDTO'
        totalItems:
          type: integer
          format: int64
          description: 'Numero totale degli elementi'
        itemsPerPage:
          type: integer
          description: 'Numero di elementi nella pagina corrente'
        totalPages:
          type: integer
          description: 'Numero totale di pagine'
        currentPage:
          type: integer
          description: 'Pagina corrente'

    ValidationErrorDTO:
      type: object
      properties:
        field:
          type: string
          description: 'nome del campo che ha generato l errore'
        message:
          type: string
          description: 'messaggio di errore'
    NotFoundErrorDTO:
      type: object
      properties:
        field:
          type: string
          description: 'nome del campo che ha generato l errore'
        message:
          type: string
          description: 'messaggio di errore'
